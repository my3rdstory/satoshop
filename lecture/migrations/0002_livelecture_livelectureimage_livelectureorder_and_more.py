# Generated by Django 5.2.2 on 2025-07-07 22:54

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('lecture', '0001_initial'),
        ('stores', '0024_store_completion_message'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LiveLecture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='라이브 강의명')),
                ('description', models.TextField(blank=True, verbose_name='라이브 강의 설명')),
                ('date_time', models.DateTimeField(blank=True, null=True, verbose_name='라이브 강의 일시')),
                ('special_notes', models.TextField(blank=True, verbose_name='특이사항')),
                ('instructor_contact', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='올바른 연락처 형식이 아닙니다.', regex='^[\\d\\-\\+\\(\\)\\s]+$')], verbose_name='강사 연락처')),
                ('instructor_email', models.EmailField(blank=True, max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='강사 이메일')),
                ('instructor_chat_channel', models.URLField(blank=True, verbose_name='강사 소통채널')),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True, verbose_name='정원')),
                ('no_limit', models.BooleanField(default=False, verbose_name='정원 없음')),
                ('price_display', models.CharField(choices=[('free', '무료'), ('sats', '사토시 가격'), ('krw', '원화연동 가격')], default='free', max_length=10, verbose_name='가격 표시 방식')),
                ('price', models.PositiveIntegerField(default=0, verbose_name='참가비(satoshi)')),
                ('price_krw', models.PositiveIntegerField(blank=True, help_text='원화 단위', null=True, verbose_name='원화 참가비')),
                ('is_discounted', models.BooleanField(default=False, verbose_name='할인 적용')),
                ('discounted_price', models.PositiveIntegerField(blank=True, null=True, verbose_name='할인가(satoshi)')),
                ('discounted_price_krw', models.PositiveIntegerField(blank=True, help_text='원화 단위', null=True, verbose_name='원화 할인가')),
                ('early_bird_end_date', models.DateField(blank=True, null=True, verbose_name='조기등록 종료일')),
                ('early_bird_end_time', models.TimeField(blank=True, null=True, verbose_name='조기등록 종료시간')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화')),
                ('is_temporarily_closed', models.BooleanField(default=False, verbose_name='일시중단')),
                ('completion_message', models.TextField(blank=True, verbose_name='참가완료 안내메시지')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='live_lectures', to='stores.store')),
            ],
            options={
                'verbose_name': '라이브 강의',
                'verbose_name_plural': '라이브 강의',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LiveLectureImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_name', models.CharField(max_length=255, verbose_name='원본 파일명')),
                ('file_path', models.CharField(max_length=500, verbose_name='파일 경로')),
                ('file_url', models.URLField(max_length=800, verbose_name='파일 URL')),
                ('file_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='파일 크기 (bytes)')),
                ('width', models.PositiveIntegerField(default=500, verbose_name='이미지 너비')),
                ('height', models.PositiveIntegerField(default=500, verbose_name='이미지 높이')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='정렬 순서')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='업로드 시간')),
                ('live_lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='lecture.livelecture')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='업로드 사용자')),
            ],
            options={
                'verbose_name': '라이브 강의 이미지',
                'verbose_name_plural': '라이브 강의 이미지들',
                'ordering': ['order', 'uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='LiveLectureOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(max_length=100, unique=True, verbose_name='주문번호')),
                ('status', models.CharField(choices=[('pending', '결제 대기'), ('confirmed', '참가 확정'), ('cancelled', '참가 취소'), ('completed', '강의 완료')], default='pending', max_length=20, verbose_name='상태')),
                ('is_temporary_reserved', models.BooleanField(default=True, verbose_name='임시 예약 상태')),
                ('reservation_expires_at', models.DateTimeField(blank=True, null=True, verbose_name='예약 만료 시간')),
                ('auto_cancelled_reason', models.CharField(blank=True, max_length=100, verbose_name='자동 취소 사유')),
                ('price', models.PositiveIntegerField(verbose_name='참가비(satoshi)')),
                ('is_early_bird', models.BooleanField(default=False, verbose_name='조기등록 할인 적용')),
                ('discount_rate', models.PositiveIntegerField(default=0, verbose_name='할인율(%)')),
                ('original_price', models.PositiveIntegerField(blank=True, null=True, verbose_name='원래 가격(satoshi)')),
                ('payment_hash', models.CharField(blank=True, max_length=255, verbose_name='결제 해시')),
                ('payment_request', models.TextField(blank=True, verbose_name='결제 요청(인보이스)')),
                ('paid_at', models.DateTimeField(blank=True, null=True, verbose_name='결제 완료 시간')),
                ('confirmed_at', models.DateTimeField(blank=True, null=True, verbose_name='참가 확정 시간')),
                ('confirmation_message_sent', models.BooleanField(default=False, verbose_name='확정 안내 발송 여부')),
                ('attended', models.BooleanField(default=False, verbose_name='참석 여부')),
                ('attended_at', models.DateTimeField(blank=True, null=True, verbose_name='참석 체크 시간')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('live_lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='lecture.livelecture')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='live_lecture_orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '라이브 강의 주문',
                'verbose_name_plural': '라이브 강의 주문',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='livelecture',
            index=models.Index(fields=['store'], name='lecture_liv_store_i_c8f98a_idx'),
        ),
        migrations.AddIndex(
            model_name='livelecture',
            index=models.Index(fields=['is_active'], name='lecture_liv_is_acti_e159c6_idx'),
        ),
        migrations.AddIndex(
            model_name='livelecture',
            index=models.Index(fields=['date_time'], name='lecture_liv_date_ti_e05ecd_idx'),
        ),
        migrations.AddIndex(
            model_name='livelecture',
            index=models.Index(fields=['store', 'is_active'], name='lecture_liv_store_i_aa339a_idx'),
        ),
        migrations.AddIndex(
            model_name='livelecture',
            index=models.Index(fields=['store', 'date_time'], name='lecture_liv_store_i_f03e0f_idx'),
        ),
        migrations.AddIndex(
            model_name='livelecture',
            index=models.Index(fields=['deleted_at'], name='lecture_liv_deleted_906cad_idx'),
        ),
        migrations.AddIndex(
            model_name='livelecture',
            index=models.Index(fields=['store', 'deleted_at'], name='lecture_liv_store_i_350513_idx'),
        ),
        migrations.AddIndex(
            model_name='livelecture',
            index=models.Index(fields=['created_at'], name='lecture_liv_created_7c4a0d_idx'),
        ),
        migrations.AddIndex(
            model_name='livelecture',
            index=models.Index(fields=['updated_at'], name='lecture_liv_updated_45c61f_idx'),
        ),
        migrations.AddIndex(
            model_name='livelecture',
            index=models.Index(fields=['is_temporarily_closed'], name='lecture_liv_is_temp_7eb3cf_idx'),
        ),
        migrations.AddIndex(
            model_name='livelecture',
            index=models.Index(fields=['price_display'], name='lecture_liv_price_d_f939fb_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureimage',
            index=models.Index(fields=['live_lecture'], name='lecture_liv_live_le_e62070_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureimage',
            index=models.Index(fields=['order'], name='lecture_liv_order_d215ac_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureimage',
            index=models.Index(fields=['uploaded_at'], name='lecture_liv_uploade_416043_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureorder',
            index=models.Index(fields=['live_lecture'], name='lecture_liv_live_le_020f42_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureorder',
            index=models.Index(fields=['user'], name='lecture_liv_user_id_b93a2e_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureorder',
            index=models.Index(fields=['status'], name='lecture_liv_status_d8df9e_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureorder',
            index=models.Index(fields=['created_at'], name='lecture_liv_created_725402_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureorder',
            index=models.Index(fields=['live_lecture', 'user'], name='lecture_liv_live_le_43185d_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureorder',
            index=models.Index(fields=['live_lecture', 'status'], name='lecture_liv_live_le_2a31b0_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureorder',
            index=models.Index(fields=['user', 'status'], name='lecture_liv_user_id_ebc092_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureorder',
            index=models.Index(fields=['order_number'], name='lecture_liv_order_n_6a7e03_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureorder',
            index=models.Index(fields=['payment_hash'], name='lecture_liv_payment_ac2cc4_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureorder',
            index=models.Index(fields=['is_temporary_reserved'], name='lecture_liv_is_temp_59ac71_idx'),
        ),
        migrations.AddIndex(
            model_name='livelectureorder',
            index=models.Index(fields=['reservation_expires_at'], name='lecture_liv_reserva_bcea10_idx'),
        ),
    ]
