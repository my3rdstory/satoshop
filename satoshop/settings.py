"""
Django settings for satoshop project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import time
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# .env 파일 로드 (로컬 개발용만)
# 클라우드 환경(렌더 등)에서는 환경변수 설정 메뉴 사용 권장
render_env = os.getenv('RENDER')  # 렌더 환경 감지
cloud_env = render_env or os.getenv('RAILWAY') or os.getenv('HEROKU')  # 기타 클라우드 환경

if cloud_env:
    # 클라우드 환경에서는 .env 파일 로드하지 않음 (환경변수 메뉴 사용)
    platform = "렌더" if render_env else "클라우드"
    print(f"🚀 {platform} 환경 감지: 환경변수 메뉴에서 설정 로드")
else:
    # 로컬 개발 환경에서만 .env 파일 로드
    env_files = [
        '.env.local',      # 로컬 개발용 (우선순위 1)
        '.env'             # 기본 파일 (우선순위 2)
    ]
    
    # 존재하는 첫 번째 .env 파일 로드
    for env_file in env_files:
        env_path = BASE_DIR / env_file
        if env_path.exists():
            load_dotenv(env_path)
            print(f"🔧 환경 파일 로드: {env_file}")
            break
    else:
        # 아무 .env 파일도 없으면 기본 load_dotenv() 호출
        load_dotenv()
        print("🔧 기본 환경 파일 로드 시도")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError('SECRET_KEY 환경변수가 설정되지 않았습니다.')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',') if os.getenv('ALLOWED_HOSTS') else []

# 개발 환경에서 로컬 네트워크 접근 허용
if DEBUG:
    ALLOWED_HOSTS.extend([
        'localhost',
        '127.0.0.1',
        '0.0.0.0',
    ])
    
    # ngrok 도메인이 환경변수에 설정된 경우 추가
    ngrok_domain = os.getenv('NGROK_DOMAIN')
    if ngrok_domain:
        ALLOWED_HOSTS.append(ngrok_domain)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',  # 천단위 콤마 등 humanize 기능
    'myshop',
    'accounts',
    'stores',
    'products',
    'orders',
    'ln_payment',
    'storage',
    'boards',
    'menu',
    'meetup',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 개발 환경에서 정적 파일 캐시 헤더 비활성화
if DEBUG:
    # 정적 파일에 no-cache 헤더 추가
    WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['js', 'css']
    WHITENOISE_ADD_HEADERS_FUNCTION = 'satoshop.utils.add_no_cache_headers'

ROOT_URLCONF = 'satoshop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'myshop.context_processors.user_store',
                'myshop.context_processors.site_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'satoshop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# 정적 파일 저장소 설정 - 해시 기반 캐시 무효화
# Django 5.x에서는 STORAGES 설정 사용 (STATICFILES_STORAGE는 deprecated)
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": (
            "django.contrib.staticfiles.storage.StaticFilesStorage"
            if DEBUG
            else "whitenoise.storage.CompressedManifestStaticFilesStorage"
        ),
    },
}

# WhiteNoise 설정
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = DEBUG

# 개발 환경에서 브라우저 캐시 비활성화
if DEBUG:
    WHITENOISE_MAX_AGE = 0  # 캐시 비활성화
    WHITENOISE_USE_FINDERS = True
    WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['js', 'css', 'map']

# 정적 파일 버전 관리 (브라우저 캐시 무효화) - 백업용
STATIC_VERSION = str(int(time.time()))

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 로그인 관련 설정
LOGIN_URL = 'accounts:login'
LOGIN_REDIRECT_URL = 'myshop:home'
LOGOUT_REDIRECT_URL = 'myshop:home'

# 블링크 API 설정
BLINK_API_URL = 'https://api.blink.sv/graphql'

# LNURL-auth 설정 (lnauth-django 호환)
# 환경별 도메인 설정
if DEBUG:
    # 개발 환경: ngrok 또는 localhost 사용
    default_domain = 'localhost:8000'
else:
    # 운영 환경: 실제 도메인 사용 (환경변수에서 가져오기)
    default_domain = 'your-production-domain.com'

# 호환성을 위해 LNURL_DOMAIN도 지원 (기존 설정과의 호환성)
LNURL_AUTH_ROOT_DOMAIN = os.getenv('LNURL_AUTH_ROOT_DOMAIN') or os.getenv('LNURL_DOMAIN') or default_domain
LNURL_AUTH_K1_TIMEOUT = int(os.getenv('LNURL_AUTH_K1_TIMEOUT', str(60 * 60)))  # 1시간

# 캐시 설정 (LNURL k1 저장용)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'lnurl-auth-cache',
    }
}

# S3 오브젝트 스토리지 설정 (iwinv)
S3_ACCESS_KEY_ID = os.getenv('S3_ACCESS_KEY_ID')
S3_SECRET_ACCESS_KEY = os.getenv('S3_SECRET_ACCESS_KEY')
S3_BUCKET_NAME = os.getenv('S3_BUCKET_NAME')
S3_ENDPOINT_URL = os.getenv('S3_ENDPOINT_URL')
S3_REGION_NAME = os.getenv('S3_REGION_NAME', 'kr-standard')
S3_USE_SSL = os.getenv('S3_USE_SSL', 'True').lower() == 'true'
S3_FILE_OVERWRITE = os.getenv('S3_FILE_OVERWRITE', 'False').lower() == 'true'
S3_CUSTOM_DOMAIN = os.getenv('S3_CUSTOM_DOMAIN', '')

# S3 파일 업로드 설정
S3_MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
S3_ALLOWED_FILE_EXTENSIONS = [
    '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.avif',
]

# 보안 설정
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# 핫링크 보호 설정 (이미지 외부 사용 방지)
HOTLINK_PROTECTION_ENABLED = os.getenv('HOTLINK_PROTECTION_ENABLED', 'True').lower() == 'true'
HOTLINK_ALLOWED_DOMAINS = os.getenv('HOTLINK_ALLOWED_DOMAINS', '').split(',') if os.getenv('HOTLINK_ALLOWED_DOMAINS') else []

# HTTPS 설정 (프로덕션에서만)
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# Django Admin 사이트 설정은 myshop.apps.MyshopConfig.ready()에서 동적으로 관리

# Gmail 이메일 설정
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
