# Generated by Django 5.2.2 on 2025-01-15 12:00

from django.db import migrations
import re


def update_order_number_format(apps, schema_editor):
    """기존 주문번호를 새로운 형식으로 업데이트"""
    Order = apps.get_model('orders', 'Order')
    
    # 대시가 없는 기존 주문번호 패턴을 찾아서 업데이트
    orders = Order.objects.all()
    
    for order in orders:
        order_number = order.order_number
        
        # 기존 패턴: ORD20241215123456 (대시 없음)
        # 새 패턴: ORD-20241215-123456 (대시 포함)
        
        # 이미 대시가 있는 경우 건너뛰기
        if '-' in order_number:
            continue
            
        # ORD + 8자리 숫자 + 6자리 숫자 패턴 매칭
        match = re.match(r'^ORD(\d{8})(\d{6})$', order_number)
        if match:
            date_part = match.group(1)  # 20241215
            time_part = match.group(2)  # 123456
            
            # 새로운 형식으로 변경
            new_order_number = f"ORD-{date_part}-{time_part}"
            
            # 중복 확인 및 처리
            counter = 0
            original_new_order_number = new_order_number
            
            while Order.objects.filter(order_number=new_order_number).exists():
                counter += 1
                # 중복이 있으면 뒤에 카운터 추가
                new_order_number = f"{original_new_order_number}-{counter:02d}"
            
            # 주문번호 업데이트
            order.order_number = new_order_number
            order.save(update_fields=['order_number'])
            
            print(f"Updated: {order_number} -> {new_order_number}")


def reverse_order_number_format(apps, schema_editor):
    """마이그레이션 롤백 시 실행될 함수"""
    Order = apps.get_model('orders', 'Order')
    
    orders = Order.objects.all()
    
    for order in orders:
        order_number = order.order_number
        
        # 새 패턴: ORD-20241215-123456 (대시 포함)
        # 기존 패턴: ORD20241215123456 (대시 없음)
        
        # 대시가 있는 경우만 처리
        if '-' not in order_number:
            continue
            
        # ORD-8자리숫자-6자리숫자 패턴 매칭
        match = re.match(r'^ORD-(\d{8})-(\d{6})(?:-\d{2})?$', order_number)
        if match:
            date_part = match.group(1)  # 20241215
            time_part = match.group(2)  # 123456
            
            # 기존 형식으로 변경
            old_order_number = f"ORD{date_part}{time_part}"
            
            # 중복 확인 및 처리
            counter = 0
            original_old_order_number = old_order_number
            
            while Order.objects.filter(order_number=old_order_number).exists():
                counter += 1
                # 중복이 있으면 뒤에 카운터 추가
                old_order_number = f"{original_old_order_number}{counter:02d}"
            
            # 주문번호 업데이트
            order.order_number = old_order_number
            order.save(update_fields=['order_number'])
            
            print(f"Reverted: {order_number} -> {old_order_number}")


class Migration(migrations.Migration):

    dependencies = [
        ('orders', '0002_invoice'),
    ]

    operations = [
        migrations.RunPython(
            update_order_number_format,
            reverse_order_number_format,
        ),
    ] 