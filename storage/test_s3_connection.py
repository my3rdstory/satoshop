#!/usr/bin/env python
"""
S3 Ïò§Î∏åÏ†ùÌä∏ Ïä§ÌÜ†Î¶¨ÏßÄ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏

ÏÇ¨Ïö©Î≤ï:
    python commons/storage/test_s3_connection.py
"""

import os
import sys
import django
from pathlib import Path

# Django ÏÑ§Ï†ï Î°úÎìú
BASE_DIR = Path(__file__).resolve().parent.parent.parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'satoshop.settings')
django.setup()

from storage.backends import S3Storage
import logging

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(
    level=logging.DEBUG,
    format='[%(asctime)s] %(levelname)s %(name)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)


def test_s3_connection():
    """S3 Ïó∞Í≤∞ ÌÖåÏä§Ìä∏"""
    print("=" * 60)
    print("S3 Ïò§Î∏åÏ†ùÌä∏ Ïä§ÌÜ†Î¶¨ÏßÄ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏")
    print("=" * 60)
    
    # iwinv Ìò∏ÌôòÏùÑ ÏúÑÌïú Ï†ÑÏó≠ ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï
    import os
    os.environ['AWS_S3_DISABLE_CHECKSUM'] = '1'
    os.environ['AWS_S3_DISABLE_MULTIPART_UPLOADS'] = '1'
    
    try:
        # S3Storage Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
        print("\n1. S3Storage Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± Ï§ë...")
        storage = S3Storage()
        print("‚úÖ S3Storage Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± ÏÑ±Í≥µ")
        
        # S3 ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
        print("\n2. S3 ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ï§ë...")
        client = storage.client
        print("‚úÖ S3 ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ ÏÑ±Í≥µ")
        
        # Î≤ÑÌÇ∑ Ï°¥Ïû¨ ÌôïÏù∏
        print(f"\n3. Î≤ÑÌÇ∑ '{storage.bucket_name}' Ï°¥Ïû¨ ÌôïÏù∏ Ï§ë...")
        response = client.head_bucket(Bucket=storage.bucket_name)
        print("‚úÖ Î≤ÑÌÇ∑ Ï°¥Ïû¨ ÌôïÏù∏ ÏôÑÎ£å")
        
        # Î≤ÑÌÇ∑ ÎÇ¥Ïö© ÎÇòÏó¥ (ÏµúÎåÄ 5Í∞ú)
        print(f"\n4. Î≤ÑÌÇ∑ '{storage.bucket_name}' ÎÇ¥Ïö© ÌôïÏù∏ Ï§ë...")
        try:
            response = client.list_objects_v2(Bucket=storage.bucket_name, MaxKeys=5)
            if 'Contents' in response:
                print(f"   Î≤ÑÌÇ∑Ïóê {len(response['Contents'])}Í∞úÏùò ÌååÏùºÏù¥ ÏûàÏäµÎãàÎã§:")
                for obj in response['Contents']:
                    print(f"   - {obj['Key']} ({obj['Size']} bytes)")
            else:
                print("   Î≤ÑÌÇ∑Ïù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Î≤ÑÌÇ∑ ÎÇ¥Ïö© ÌôïÏù∏ Ï§ë Ïò§Î•ò: {e}")
        
        # Í∞ÑÎã®Ìïú ÌååÏùº ÏóÖÎ°úÎìú ÌÖåÏä§Ìä∏
        print("\n5. Í∞ÑÎã®Ìïú ÌååÏùº ÏóÖÎ°úÎìú ÌÖåÏä§Ìä∏ Ï§ë...")
        test_content = b"S3 connection test file"
        test_key = "test/connection_test.txt"
        
        try:
            # Î®ºÏ†Ä boto3Î°ú ÏãúÎèÑ
            import os
            import io
            
            # checksum Í∏∞Îä• ÎπÑÌôúÏÑ±Ìôî
            os.environ['AWS_S3_DISABLE_CHECKSUM'] = '1'
            
            # BytesIOÎ°ú Î≥ÄÌôòÌïòÏó¨ ÏóÖÎ°úÎìú
            file_obj = io.BytesIO(test_content)
            
            try:
                client.put_object(
                    Bucket=storage.bucket_name,
                    Key=test_key,
                    Body=file_obj,
                    ContentType='text/plain',
                    ContentLength=len(test_content)  # ÌååÏùº ÌÅ¨Í∏∞ Î™ÖÏãúÏ†Å ÏßÄÏ†ï
                )
                print("‚úÖ ÌÖåÏä§Ìä∏ ÌååÏùº ÏóÖÎ°úÎìú ÏÑ±Í≥µ (boto3)")
            except Exception as boto_error:
                if 'MissingContentLength' in str(boto_error):
                    print("   ‚ö†Ô∏è  boto3 ÏóÖÎ°úÎìú Ïã§Ìå®, ÏßÅÏ†ë HTTP ÏóÖÎ°úÎìúÎ°ú Ïû¨ÏãúÎèÑ...")
                    
                    # ÏßÅÏ†ë HTTP ÏóÖÎ°úÎìú ÏãúÎèÑ
                    from storage.fallback_upload import direct_s3_upload
                    
                    result = direct_s3_upload(
                        bucket_name=storage.bucket_name,
                        key=test_key,
                        content=test_content,
                        content_type='text/plain',
                        access_key=storage.access_key_id,
                        secret_key=storage.secret_access_key,
                        endpoint_url=storage.endpoint_url,
                        region=storage.region_name
                    )
                    
                    if result['success']:
                        print("‚úÖ ÌÖåÏä§Ìä∏ ÌååÏùº ÏóÖÎ°úÎìú ÏÑ±Í≥µ (ÏßÅÏ†ë HTTP)")
                    else:
                        raise Exception(f"ÏßÅÏ†ë HTTP ÏóÖÎ°úÎìúÎèÑ Ïã§Ìå®: {result.get('error', 'Unknown error')}")
                else:
                    raise boto_error
            
            # ÏóÖÎ°úÎìúÌïú ÌååÏùº ÌôïÏù∏
            response = client.head_object(Bucket=storage.bucket_name, Key=test_key)
            print(f"   ÏóÖÎ°úÎìúÎêú ÌååÏùº ÌÅ¨Í∏∞: {response['ContentLength']} bytes")
            
            # ÌÖåÏä§Ìä∏ ÌååÏùº ÏÇ≠Ï†ú
            client.delete_object(Bucket=storage.bucket_name, Key=test_key)
            print("‚úÖ ÌÖåÏä§Ìä∏ ÌååÏùº ÏÇ≠Ï†ú ÏôÑÎ£å")
            
        except Exception as e:
            print(f"   ‚ùå ÌååÏùº ÏóÖÎ°úÎìú ÌÖåÏä§Ìä∏ Ïã§Ìå®: {e}")
        
        print("\n" + "=" * 60)
        print("üéâ S3 Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÏôÑÎ£å! Î™®Îì† Í∏∞Îä•Ïù¥ Ï†ïÏÉÅ ÏûëÎèôÌï©ÎãàÎã§.")
        print("=" * 60)
        return True
        
    except Exception as e:
        print(f"\n‚ùå S3 Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ïã§Ìå®: {e}")
        print("\nüîß Î¨∏Ï†ú Ìï¥Í≤∞ Î∞©Î≤ï:")
        print("1. .env ÌååÏùºÏùò S3 ÏÑ§Ï†ïÍ∞íÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî")
        print("2. iwinv Ïò§Î∏åÏ†ùÌä∏ Ïä§ÌÜ†Î¶¨ÏßÄ Ïï°ÏÑ∏Ïä§ ÌÇ§Í∞Ä Ïú†Ìö®ÌïúÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî")
        print("3. Î≤ÑÌÇ∑Ïù¥ Ï°¥Ïû¨ÌïòÍ≥† Ï†ëÍ∑º Í∂åÌïúÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî")
        print("4. ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî")
        return False


def show_current_settings():
    """ÌòÑÏû¨ S3 ÏÑ§Ï†ïÍ∞í ÌëúÏãú"""
    from django.conf import settings
    
    print("\nüìã ÌòÑÏû¨ S3 ÏÑ§Ï†ïÍ∞í:")
    print("-" * 40)
    
    s3_settings = {
        'S3_ACCESS_KEY_ID': getattr(settings, 'S3_ACCESS_KEY_ID', None),
        'S3_SECRET_ACCESS_KEY': getattr(settings, 'S3_SECRET_ACCESS_KEY', None),
        'S3_BUCKET_NAME': getattr(settings, 'S3_BUCKET_NAME', None),
        'S3_ENDPOINT_URL': getattr(settings, 'S3_ENDPOINT_URL', None),
        'S3_REGION_NAME': getattr(settings, 'S3_REGION_NAME', None),
        'S3_USE_SSL': getattr(settings, 'S3_USE_SSL', None),
    }
    
    for key, value in s3_settings.items():
        if key == 'S3_SECRET_ACCESS_KEY' and value:
            # ÏãúÌÅ¨Î¶ø ÌÇ§Îäî ÎßàÏä§ÌÇπ
            display_value = f"{value[:4]}...{value[-4:]}" if len(value) > 8 else "***"
        else:
            display_value = value
        
        status = "‚úÖ" if value else "‚ùå"
        print(f"{status} {key}: {display_value}")


if __name__ == "__main__":
    show_current_settings()
    print()
    success = test_s3_connection()
    
    if not success:
        sys.exit(1) 